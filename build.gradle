/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:10.6.0'
    }
}

ext {
    junitVersion = '4.10'
    slf4jVersion = '1.7.26'
    unirestVersion = '1.4.9'
    vavrVersion = '0.9.2'
    guavaVersion = '19.0'
    sketchesVersion = '0.9.1'
    rxJavaVersion = '1.3.8'
    rxJavaMathVersion = '1.0.0'
    lombokVersion = '1.18.12'
    mockitoVersion = '1.9.+'
    assertjVersion = '3.12.+'
}

allprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'idea'
}

apply plugin: 'java-library'
//apply plugin: 'checkstyle'
apply plugin: 'pmd'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'io.mantisrx'

if (project.hasProperty('useMavenLocal')) {
    repositories {
        mavenLocal()
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://netflixoss.jfrog.io/artifactory/maven-oss-candidates"
    }
}

dependencies {
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "com.mashape.unirest:unirest-java:$unirestVersion"
    implementation "io.reactivex:rxjava-math:$rxJavaMathVersion"
    implementation "io.vavr:vavr:$vavrVersion"
    implementation "io.vavr:vavr-jackson:$vavrVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "com.yahoo.datasketches:sketches-core:$sketchesVersion"
    implementation "io.reactivex:rxjava:$rxJavaVersion"
    implementation "org.apache.commons:commons-math3:3.6.1"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
}

task runScaler(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.netflix.control.ExperimentRunner'
}

tasks.withType(Javadoc).all {
    enabled = false
}

license {
    ignoreFailures = false
}

pmd {
    ignoreFailures = true
}

def printAllReleasedArtifacts = project.tasks.create('printAllReleasedArtifacts')
project.snapshot.configure { finalizedBy printAllReleasedArtifacts }

project.plugins.withType(MavenPublishPlugin) {
    def printReleasedArtifact = project.tasks.create('printReleasedArtifact')
    printReleasedArtifact.doLast {
        def file1 = file("${buildDir}/tmp/publishNebulaPublicationToNetflixOSSRepository/maven-metadata.xml")
        def file2 = file("${buildDir}/tmp/publishNebulaPublicationToNetflixOSSRepository/snapshot-maven-metadata.xml")
        def xmlText = file1.exists() ? file1.text : (file2.exists() ? file2.text : "file not found")
        def xml = new XmlParser(false, false).parseText(xmlText)
        def snapshotVersion = xml.versioning.snapshotVersions.snapshotVersion[0].'value'.text()
        logger.lifecycle("${project.group}:${project.name}:${snapshotVersion}")
        file("${project.rootProject.buildDir}/versions.txt").append("${project.group}:${project.name}:${snapshotVersion}" + '\n')
    }

    printReleasedArtifact.dependsOn(project.rootProject.snapshot)
    printAllReleasedArtifacts.dependsOn("${project.path}:printReleasedArtifact")
}

//apply from: file('gradle/check.gradle')
